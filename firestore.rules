/**
 * @fileoverview Firestore Security Rules for TaskMaster Pro.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and tasks.
 * Each user can only access their own data, and tasks are secured under their respective user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/tasks/{taskId}: Stores tasks belonging to a specific user. Each task document contains a `userId` field that MUST match the `userId` in the path.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile.
 * - Users can only create, read, update, and delete tasks under their own user ID.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Task` entity denormalizes the `userId` field, allowing for simple ownership checks on the task documents themselves (e.g., `resource.data.userId == request.auth.uid`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'testUser' with UID 'testUid' can create their own profile with matching ID.
     *   Request: { "auth": { "uid": "testUid" }, "resource.data.id": "testUid" }
     * @allow (get) - User 'testUser' with UID 'testUid' can get their own profile.
     *   Request: { "auth": { "uid": "testUid" } }
     * @allow (update) - User 'testUser' with UID 'testUid' can update their own profile.
     *   Request: { "auth": { "uid": "testUid" } }
     * @allow (delete) - User 'testUser' with UID 'testUid' can delete their own profile.
     *   Request: { "auth": { "uid": "testUid" } }
     * @deny (create) - User 'otherUser' with UID 'otherUid' cannot create a profile for 'testUser'.
     *   Request: { "auth": { "uid": "otherUid" }, "resource.data.id": "testUid" }
     * @deny (get) - User 'otherUser' with UID 'otherUid' cannot get 'testUser's profile.
     *   Request: { "auth": { "uid": "otherUid" } }
     * @deny (update) - User 'otherUser' with UID 'otherUid' cannot update 'testUser's profile.
     *   Request: { "auth": { "uid": "otherUid" } }
     * @deny (delete) - User 'otherUser' with UID 'otherUid' cannot delete 'testUser's profile.
     *   Request: { "auth": { "uid": "otherUid" } }
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the tasks subcollection. Only the owner of the task can create, read, update, and delete it.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User 'testUser' with UID 'testUid' can create a task under their profile, with matching userId.
     *   Request: { "auth": { "uid": "testUid" }, "resource.data.userId": "testUid" }
     * @allow (get) - User 'testUser' with UID 'testUid' can get a task under their profile.
     *   Request: { "auth": { "uid": "testUid" } }
     * @allow (list) - User 'testUser' with UID 'testUid' can list tasks under their profile.
     *   Request: { "auth": { "uid": "testUid" } }
     * @allow (update) - User 'testUser' with UID 'testUid' can update a task under their profile.
     *   Request: { "auth": { "uid": "testUid" } }
     * @allow (delete) - User 'testUser' with UID 'testUid' can delete a task under their profile.
     *   Request: { "auth": { "uid": "testUid" } }
     * @deny (create) - User 'otherUser' with UID 'otherUid' cannot create a task for 'testUser'.
     *   Request: { "auth": { "uid": "otherUid" }, "resource.data.userId": "testUid" }
     * @deny (get) - User 'otherUser' with UID 'otherUid' cannot get a task under 'testUser's profile.
     *   Request: { "auth": { "uid": "otherUid" } }
     * @deny (list) - User 'otherUser' with UID 'otherUid' cannot list tasks under 'testUser's profile.
     *   Request: { "auth": { "uid": "otherUid" } }
     * @deny (update) - User 'otherUser' with UID 'otherUid' cannot update a task under 'testUser's profile.
     *   Request: { "auth": { "uid": "otherUid" } }
     * @deny (delete) - User 'otherUser' with UID 'otherUid' cannot delete a task under 'testUser's profile.
     *   Request: { "auth": { "uid": "otherUid" } }
     * @principle Enforces strict user ownership for tasks within their profile.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
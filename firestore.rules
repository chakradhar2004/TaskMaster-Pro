/**
 * @fileoverview Firestore Security Rules for TaskMaster Pro.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and tasks.
 * Only the authenticated user can read or write their own profile data, and only the user
 * who owns a task can modify or delete it.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. The {userId} corresponds to the Firebase Auth UID.
 * - /users/{userId}/tasks/{taskId}: Stores tasks belonging to a specific user. Each task document
 *   includes a 'userId' field that MUST match the {userId} in the path.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Tasks are secured using a combination of path-based ownership and a denormalized 'userId'
 *   field on each task document. This allows for efficient and secure read/write rules without
 *   additional database reads.
 *
 * Denormalization for Authorization:
 * - The 'Task' entity includes a 'userId' field, which is a duplicate of the parent document ID.
 *   This is CRUCIAL for enforcing ownership.
 *   On task creation, the 'userId' field MUST match the {userId} path parameter.
 *   On task updates, the 'userId' field MUST NOT be changed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access, update, or delete their profile if the userId matches their auth UID.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the userId does not match the authenticated user's UID.
     * @deny (list) - Listing all users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user ID matches the authenticated user's UID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile if the userId matches their auth UID.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow the user to get their own profile if the userId matches their auth UID.
      allow get: if isOwner(userId);

      // Allow the user to update their own profile if the userId matches their auth UID and the id is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile if the userId matches their auth UID.
      allow delete: if isExistingOwner(userId);

      // Listing all users is not allowed.
      allow list: if false;
    }

    /**
     * @description Secure tasks associated with a specific user. Only the owner can create, read, update, or delete their own tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user can create a task if the userId matches their auth UID.
     * @allow (get, list) - Authenticated user can read or list their own tasks.
     * @allow (update, delete) - Authenticated user can update or delete their own tasks.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, list, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for tasks.
     */
    match /users/{userId}/tasks/{taskId} {
        // Function to check if the user is signed in
        function isSignedIn() {
          return request.auth != null;
        }

        // Function to check if the user ID matches the authenticated user's UID
        function isOwner(userId) {
          return isSignedIn() && request.auth.uid == userId;
        }

        // Function to check if the user is the existing owner of the document.
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        // Allow the user to create a task if the userId matches their auth UID and the userId in the document matches the path.
        allow create: if isOwner(userId) && request.resource.data.userId == userId;

        // Allow the user to get a task if the userId matches their auth UID.
        allow get: if isOwner(userId);

        // Allow the user to list tasks if the userId matches their auth UID.
        allow list: if isOwner(userId);

        // Allow the user to update a task if the userId matches their auth UID and the userId is immutable.
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

        // Allow the user to delete a task if the userId matches their auth UID.
        allow delete: if isExistingOwner(userId);
    }
  }
}
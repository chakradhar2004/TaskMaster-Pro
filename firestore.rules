/**
 * @fileoverview Firestore Security Rules for TaskMaster Pro.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and tasks.
 * Each user can only access their own data, and tasks are secured under their respective user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/tasks/{taskId}: Stores tasks belonging to a specific user. Each task contains the `userId` as a field for efficient owner validation.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - Tasks are owned by the user ID present in the path and must match the `userId` field inside the Task document.
 * - Write operations to `/users/{userId}` documents are only allowed if the authenticated user's ID matches the `userId` in the path, creating a self-creation and ownership model. Updates are only allowed by the owning user.
 * - Write operations to `/users/{userId}/tasks/{taskId}` documents are only allowed if the authenticated user's ID matches the `userId` in the path, enforcing task ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, ensuring users can only access their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @allow (get) User with UID 'user123' can get their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/user456.
     * @deny (update) User with UID 'user123' cannot update the profile at /users/user456.
     * @deny (get) User with UID 'user123' cannot get the profile at /users/user456.
     * @deny (list) No one can list all users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures tasks under a user's profile, ensuring only the owner can manage them.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'user123' can create a task at /users/user123/tasks/task456 where task.userId == 'user123'.
     * @allow (update) User with UID 'user123' can update a task at /users/user123/tasks/task456 where task.userId == 'user123'.
     * @allow (get) User with UID 'user123' can get a task at /users/user123/tasks/task456.
     * @allow (list) User with UID 'user123' can list tasks at /users/user123/tasks.
     * @deny (create) User with UID 'user123' cannot create a task at /users/user456/tasks/task456.
     * @deny (update) User with UID 'user123' cannot update a task at /users/user456/tasks/task456.
     * @deny (get) User with UID 'user123' cannot get a task at /users/user456/tasks/task456.
     * @principle Enforces document ownership for all operations, validates the `userId` field on create.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if isOwner(userId) && request.resource.data.get('userId') == userId;
      allow update: if isOwner(userId) && request.resource.data.get('userId') == userId;
      allow delete: if isOwner(userId);
    }
  }
}
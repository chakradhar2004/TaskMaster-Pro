/**
 * @fileoverview Firestore Security Rules for TaskMaster Pro.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for tasks. Users can only
 * access their own user profile and the tasks associated with their user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/tasks/{taskId}: Stores tasks owned by a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Tasks are owned by a user, enforced via the path and a `userId` field on the task.
 * - Data validation is relaxed for rapid prototyping but enforces ownership.
 *
 * Denormalization for Authorization:
 * - Each task document includes the `userId` of its owner, enabling direct
 *   ownership checks without additional `get()` calls. This improves performance
 *   and simplifies the security rules.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} path, ensuring it's
 *   only accessible to the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can read or write their own user document.
     * @path /users/{userId}
     * @allow (get) Authenticated user reads their own profile.
     * @allow (create) Authenticated user creates their own profile.
     * @allow (update) Authenticated user updates their own profile.
     * @allow (delete) Authenticated user deletes their own profile.
     * @deny (get) Authenticated user tries to read another user's profile.
     * @deny (create) Authenticated user tries to create another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces that only the owner can manage their tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) Authenticated user creates a task with their user ID.
     * @allow (get) Authenticated user reads their own task.
     * @allow (update) Authenticated user updates their own task.
     * @allow (delete) Authenticated user deletes their own task.
     * @deny (create) Authenticated user tries to create a task for another user.
     * @deny (update) Authenticated user tries to update another user's task.
     * @principle Enforces document ownership and referential integrity.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}